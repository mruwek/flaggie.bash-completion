#
# Flaggie Bash Shell Command Completion
#
# this code depends on 'gentoo' completion file from gentoo-bashcomp, so be sure
# to either install that package and then enable 'gentoo' via 'eselect':
# # eselect bashcomp enable gentoo
# or get the 'gentoo.bash-completion' from my bitbucket repository
# (http://bitbucket.org/mruwek/bash-completion/) and place it in
# /root/.bash_completion.d

__get_flargs_global() {
    ns="$1"
    portdir=$(_portdir -o)

    if [[ $ns == "lic::" ]]; then
        for pd in ${portdir}; do
            ls $pd/licenses 2>/dev/null
            cat $pd/profiles/license_groups 2>/dev/null | sed -e '/^$\|^#/d'| awk -F ' ' '{print "@"$1}'
        done
    elif [[ $ns == "kw::" ]]; then
        for pd in ${portdir}; do
            cat $pd/profiles/arch.list 2>/dev/null | sed -e '/^$\|^#/d;s/^\(.*\)/~\1\n\1/'
        done
    elif [[ $ns == "use::" ]]; then
        for pd in ${portdir}; do
            sed -n -e 's/^\([^ ]\+\) - .*$/\1/p' $pd/profiles/use.desc 2>/dev/null
        done
    elif [[ $ns == "env::" ]]; then
        find /etc/portage/env/ -type f | sed -e 's:/etc/portage/env/::'
        find /etc/portage/env/ -type d | sed -e '1d;s:/etc/portage/env/\(.*\):\1/:'
    else
        for pd in ${portdir}; do
            ls $pd/licenses 2>/dev/null
            cat $pd/profiles/license_groups 2>/dev/null | sed -e '/^$\|^#/d'| awk -F ' ' '{print "@"$1}'
        done
        for pd in ${portdir}; do
            cat $pd/profiles/arch.list 2>/dev/null | sed -e '/^$\|^#/d;s/^\(.*\)/~\1\n\1/'
        done
        for pd in ${portdir}; do
            sed -n -e 's/^\([^ ]\+\) - .*$/\1/p' $pd/profiles/use.desc 2>/dev/null
        done
        find /etc/portage/env/ -type f | sed -e 's:/etc/portage/env/::'
        find /etc/portage/env/ -type d | sed -e '1d;s:/etc/portage/env/\(.*\):\1/:'
    fi
}
__get_flargs()
{
    local pkgcache ns

    pkgcache="$1"
    ns="$2"

    if [[ $ns == "lic::" ]]; then
        sed -n "7 p" $pkgcache 2>/dev/null | sed -e 's/linguas_.\{2,5\} //g;s/^|| ( \(.*\) )/\1/g;s/-\* //g;s/\(\s\)[-+]\|^[-+]/\1/g';
    elif [[ $ns == "kw::" ]]; then
        sed -n "9 p" $pkgcache 2>/dev/null | sed -e 's/linguas_.\{2,5\} //g;s/^|| ( \(.*\) )/\1/g;s/-\* //g;s/\(\s\)[-+]\|^[-+]/\1/g';
    elif [[ $ns == "use::" ]]; then
        sed -n "11 p" $pkgcache 2>/dev/null | sed -e 's/linguas_.\{2,5\} //g;s/^|| ( \(.*\) )/\1/g;s/-\* //g;s/\(\s\)[-+]\|^[-+]/\1/g';
    elif [[ $ns == "env::" ]]; then
        find /etc/portage/env/ -type f | sed -e 's:/etc/portage/env/::'
        find /etc/portage/env/ -type d | sed -e '1d;s:/etc/portage/env/\(.*\):\1/:'
    else
        sed -n "7 p;9 p;11 p" $pkgcache 2>/dev/null | sed -e 's/linguas_.\{2,5\} //g;s/^|| ( \(.*\) )/\1/g;s/-\* //g;s/\(\s\)[-+]\|^[-+]/\1/g';
        find /etc/portage/env/ -type f| sed -e 's:/etc/portage/env/::'
        find /etc/portage/env/ -type d | sed -e '1d;s:/etc/portage/env/\(.*\):\1/:'
    fi
}

__complete_flargs_global() {
    mode="$1"
    cur="$2"

    if [[ ${prev} == *lic* || ${prev} == :: && ${COMP_WORDS[$COMP_CWORD-2]} == *lic ]]; then
        ns='lic::'
    elif [[ ${prev} == *kw* || ${prev} == :: && ${COMP_WORDS[$COMP_CWORD-2]} == *kw ]]; then
        ns='kw::'
    elif [[ ${prev} == *use* || ${prev} == :: && ${COMP_WORDS[$COMP_CWORD-2]} == *use ]]; then
        ns='use::'
    elif [[ ${prev} == *env* || ${prev} == :: && ${COMP_WORDS[$COMP_CWORD-2]} == *env ]]; then
        ns='env::'
    else
        ns=''
    fi

    iuse=$(__get_flargs_global $ns)

    if [[ -n "${iuse}" && -z $ns ]]; then
        if [[ $mode == "enable" ]]; then
            iuse=`echo $iuse | sed -e "s/\(^\| \)/\1+/g"`;
        elif [[ $mode == "disable" ]]; then
            iuse=`echo $iuse | sed -e 's/\(^\| \)/\1-/g'`;
        elif [[ $mode == "reset" ]]; then
            iuse=`echo $iuse | sed -e 's/\(^\| \)/\1%/g'`;
        elif [[ $mode == "status_print" ]]; then
            iuse=`echo $iuse | sed -e 's/^/\?/g;s/ / \?/g'`;
            if [[ $cur == "i" ]]; then
                COMPREPLY=($(compgen -W "$iuse" -- "?"))
            fi
        fi

        if [[ $COMPREPLY == "" ]]; then
            COMPREPLY=($(compgen -W "$iuse" -- "$cur"))
        fi
        return

    elif [[ -n "${iuse}" && -n $ns ]]; then
        COMPREPLY=($(compgen -W "$iuse" -- "$cur"))
    else
        COMPREPLY=()
        return
    fi

}

__find_pkg() {

    if [[ ${COMP_WORDS[@]} == *-*/* ]]; then
        x=0
        for string in ${COMP_WORDS[@]}; do
            if [[ $string == *-*/* ]]; then
                break
            else
                let x++
            fi
        done
        echo $x
    fi

}

__complete_flargs()
{
    local cur mode portdir pkg atom iuse ns

    mode="$1"
    cur="$2"
    pkg_pos=$(__find_pkg)
    pkg=${COMP_WORDS[$pkg_pos]}
    portdir=$(_portdir -o)
    atom=(`qatom "${pkg}"`)

    if [[ ${prev} == *lic* || ${prev} == :: && ${COMP_WORDS[$COMP_CWORD-2]} == *lic ]]; then
        ns='lic::'
    elif [[ ${prev} == *kw* || ${prev} == :: && ${COMP_WORDS[$COMP_CWORD-2]} == *kw ]]; then
        ns='kw::'
    elif [[ ${prev} == *use* || ${prev} == :: && ${COMP_WORDS[$COMP_CWORD-2]} == *use ]]; then
        ns='use::'
    elif [[ ${prev} == *env* || ${prev} == :: && ${COMP_WORDS[$COMP_CWORD-2]} == *env ]]; then
        ns='env::'
    else
        ns=''
    fi

    if [[ ${atom[2]} == "(null)" || ${atom[1]} == *${atom[2]} ]]; then
        iuse=$(\
            for pd in ${portdir}; do
                builtin cd ${pd}/metadata/cache/${atom[0]} 2>/dev/null;
                for pkgcache in ${atom[1]}-[0-9]*; do
                    __get_flargs $pkgcache $ns
                done
            done)
    else
        if [[ ${atom[3]} == "" ]]; then
            iuse=$(\
                for pd in ${portdir}; do
                    builtin cd ${pd}/metadata/cache/${atom[0]} 2>/dev/null;
                    pkgcache="${atom[1]}-${atom[2]}";
                    __get_flargs $pkgcache $ns
               done)
        else
            iuse=$(\
                for pd in ${portdir}; do
                    builtin cd ${pd}/metadata/cache/${atom[0]} 2>/dev/null;
                    pkgcache="${atom[1]}-${atom[2]}-${atom[3]}";
                    __get_flargs $pkgcache $ns
                done)
        fi
    fi

    if [[ -n "${iuse}" && -z $ns ]]; then
        if [[ $mode == "enable" ]]; then
            iuse=`echo $iuse | sed -e "s/\(^\| \)/\1+/g"`;
        elif [[ $mode == "disable" ]]; then
            iuse=`echo $iuse | sed -e 's/\(^\| \)/\1-/g'`;
        elif [[ $mode == "reset" ]]; then
            iuse=`echo $iuse | sed -e 's/\(^\| \)/\1%/g'`;
        elif [[ $mode == "status_print" ]]; then
            iuse=`echo $iuse | sed -e 's/^/\?/g;s/ / \?/g'`;
            if [[ $cur == "i" ]]; then
                COMPREPLY=($(compgen -W "$iuse" -- "?"))
            fi
        fi

        if [[ $COMPREPLY == "" ]]; then
            COMPREPLY=($(compgen -W "$iuse" -- "$cur"))
        fi
        return

    elif [[ -n "${iuse}" && -n $ns ]]; then
        COMPREPLY=($(compgen -W "$iuse" -- "$cur"))
    else
        COMPREPLY=()
        return
    fi
}


#
# Main completion function for flaggie
#

_flaggie()
{
    local cur prev mode portdir use atom

    portdir=$(_portdir)
    COMPREPLY=()
    prev="$3"
    cur="$2"

    case "${prev}" in
        @(flaggie|--*))
            case "${cur}" in
                --*)
                    COMPREPLY=($(compgen -W "--quiet --strict --drop-ineffective
                    --sort-entries --sort-flags --sort --cleanup
                    --drop-unmatched-pkgs --drop-unmatched-flags
                    --destructive-cleanup --migrate-files" -- "$cur"))
                ;;
                -*)
                    __complete_flargs_global disable $cur
                ;;
                %*)
                    __complete_flargs_global reset $cur
                ;;
                "?"*)
                    __complete_flargs_global status_print $cur
                ;;
                +*)
                    __complete_flargs_global enable $cur
                ;;
                *)
                    _pkgname -A $cur
                ;;
            esac
        ;;
        --)
            return
        ;;
        @(+|-|%|"?"|::)*)
            if [[ ${COMP_WORDS[@]} == *-*/* ]]; then
                case "${cur}" in
                    -*)
                        __complete_flargs disable $cur
                    ;;
                    %*)
                        __complete_flargs reset $cur
                    ;;
                    "?"*)
                        __complete_flargs status_print $cur
                    ;;
                    +*)
                        __complete_flargs enable $cur
                    ;;
                    *)
                        __complete_flargs enable $cur
                    ;;
                esac
            else
                case "${cur}" in
                    -*)
                        __complete_flargs_global disable $cur
                    ;;
                    %*)
                        __complete_flargs_global reset $cur
                    ;;
                    "?"*)
                        __complete_flargs_global status_print $cur
                    ;;
                    +*)
                        __complete_flargs_global enable $cur
                    ;;
                    *)
                        __complete_flargs_global enable $cur
                    ;;
                esac
            fi
        ;;
        *)
            case "${cur}" in
                --*)
                    COMPREPLY=($(compgen -W "--quiet --strict --drop-ineffective
                    --sort-entries --sort-flags --sort --cleanup
                    --drop-unmatched-pkgs --drop-unmatched-flags
                    --destructive-cleanup --migrate-files" -- "$cur"))
                ;;
                -*)
                    __complete_flargs disable $cur
                ;;
                %*)
                    __complete_flargs reset $cur
                ;;
                "?"*)
                    __complete_flargs status_print $cur
                ;;
                +*)
                    __complete_flargs enable $cur
                ;;
                *)
                    __complete_flargs enable $cur
                ;;
            esac
        ;;
    esac
}
complete -F _flaggie flaggie

# vim: set ft=sh tw=80 sw=4 et :
